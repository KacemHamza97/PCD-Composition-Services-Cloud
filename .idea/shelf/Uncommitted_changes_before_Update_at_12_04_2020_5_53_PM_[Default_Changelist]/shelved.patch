Index: multi_objective_algorithms/algorithms/main/spea2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from random import sample\r\nfrom data_structure.CompositionPlan import CompositionPlan\r\nfrom data_structure.Solution import Solution\r\nfrom genetic_operations.implementation import BSG\r\nfrom multi_objective_algorithms.algorithms.operations.objective_functions import functions \r\nfrom multi_objective_algorithms.algorithms.operations.objective_functions import dominates\r\nfrom multi_objective_algorithms.algorithms.operations.update import normalize , normalized_Euclidean_Distance , transform\r\n\r\n\r\n# +----------------------------------------------------------------------------------------------+#\r\n\r\ndef strength(indiv1, U):\r\n    s = 1\r\n    for indiv2 in (U):\r\n        if dominates(indiv1, indiv2):\r\n            s += 1\r\n    return s\r\n\r\n\r\n# +----------------------------------------------------------------------------------------------+#\r\n\r\n# rawfitness is to minimize !\r\n\r\ndef rawFitness(indiv1, U):\r\n    return sum([strength(indiv2, U) for indiv2 in U if dominates(indiv2, indiv1)])\r\n\r\n\r\n# +----------------------------------------------------------------------------------------------+#\r\n\r\ndef fit(indiv1, U, k):\r\n    dist = []\r\n    norm = normalize(transform(U))\r\n    for indiv2 in U:\r\n        dist.append(normalized_Euclidean_Distance(indiv1, indiv2 , norm))\r\n    dist.sort()\r\n    value = dist[k]\r\n    return 1 / (value + 2) + rawFitness(indiv1, U)\r\n\r\n\r\n# +----------------------------------------------------------------------------------------------+#\r\n\r\ndef nondominated_individuals(U):\r\n    non_dominated = []\r\n    for indiv1 in (U):\r\n        for indiv2 in (U):\r\n            if dominates(indiv2, indiv1):\r\n                break\r\n        non_dominated.append(indiv1)\r\n    return non_dominated\r\n\r\n\r\n# +----------------------------------------------------------------------------------------------+#\r\n\r\ndef dominated_individuals(population):\r\n    dominated_individuals = []\r\n    for indiv1 in population:\r\n        for indiv2 in population:\r\n            if dominates(indiv2, indiv1):\r\n                dominated_individuals.append(indiv1)\r\n                break\r\n    return dominated_individuals\r\n\r\n\r\n# +----------------------------------------------------------------------------------------------+#\r\n\r\ndef sort_population_by_fitness(population):\r\n    return sorted(population, key=lambda indiv: indiv.fitness)\r\n\r\n\r\n# +----------------------------------------------------------------------------------------------+#\r\n\r\n# n : number of elements to remove from X\r\ndef truncation(n, X):\r\n    # evaluating distances\r\n    distances = []  # list of tuples (sol1 , sol2 , distance)\r\n    e = set()\r\n    norm = normalize(transform(X))\r\n    for i, sol1 in enumerate(X):\r\n        e.add(i)  # avoid calculating same distance twice\r\n        for j, sol2 in enumerate(X):\r\n            if j not in e:\r\n                distances.append((sol1, sol2, normalized_Euclidean_Distance(sol1, sol2 ,norm)))\r\n\r\n                # sorting distances\r\n    distances.sort(key=lambda dist: dist[2])\r\n    remove = list()  # list of solutions to remove\r\n    for dist in distances:\r\n        if len(remove) < n and dist[1] not in remove:\r\n            remove.append(dist[1])\r\n    for sol in X:\r\n        if sol in remove:\r\n            X.remove(sol)\r\n    return X\r\n\r\n\r\n# +----------------------------------------------------------------------------------------------+#\r\n\r\ndef update(dominated_individuals, X, N):\r\n    if len(X) < N:\r\n        X.extend(sort_population_by_fitness(dominated_individuals)[N - len(X)])\r\n    elif len(X) > N:\r\n        X = truncation(len(X) - N, X)[:N]\r\n\r\n\r\n# +----------------------------------------------------------------------------------------------+#\r\n\r\n\r\ndef binaryTournement(X):\r\n    final = []\r\n    p1, p2 = sample(X, 2)\r\n    final.append(p1) if p1.fitness > p2.fitness else final.append(p2)\r\n    while 1:\r\n        p3, p4 = sample(X, 2)\r\n        if p3.cp != final[0].cp and p4.cp != final[0].cp:\r\n            break\r\n    final.append(p3) if p3.fitness > p4.fitness else final.append(p4)\r\n    return final[0], final[1]\r\n\r\n\r\n# +----------------------------------------------------------------------------------------------+#\r\n\r\n# N : Population size , EN : archive size , G : number of generations\r\n\r\ndef spea2(problem, G, N, EN):\r\n    # initializing parameters\r\n\r\n    k = int((EN + N) ** 0.5)  # k-th nearest data point number\r\n\r\n    # population  initializing\r\n\r\n    population = list()\r\n\r\n    for i in range(N):\r\n        while 1:\r\n            cp = CompositionPlan(problem.getActGraph(), problem.getCandidates())\r\n            if cp.verifyConstraints(problem.getConstraints()):\r\n                population.append(Solution(cp=cp, fitness=0, functions=functions(cp)))\r\n                break\r\n\r\n    # Initializing archive\r\n    EA = []\r\n\r\n    # Algorithm\r\n    for generation in range(G+1):\r\n\r\n        U = set(population + EA)\r\n\r\n        for indiv in U:\r\n            indiv.fitness = fit(indiv, U, k)\r\n\r\n        EA = nondominated_individuals(U)\r\n\r\n        if generation == G+1 :\r\n            break\r\n\r\n        update(dominated_individuals(U), EA, EN)\r\n\r\n        # Creating the mating_pool\r\n        mating_pool = []\r\n        for itera in range(EN // 4) :\r\n            mating_pool.extend(binaryTournement(EA))\r\n\r\n        next_generation = []\r\n        # Creating new generation\r\n        for itera in range(EN // 4) : \r\n            # Selecting parents for offsprings generation\r\n            while 1:\r\n                parent1, parent2 = sample(mating_pool, 2)\r\n                if parent1.cp != parent2.cp :\r\n                    break\r\n\r\n    \r\n            # Applying BSG\r\n            offsprings = BSG(parent1.cp, parent2.cp, problem.getConstraints(), problem.getCandidates())\r\n            # Adding offsprings\r\n            next_generation += [Solution(cp = cp , fitness = 0 , functions = functions(cp)) for cp in offsprings]\r\n\r\n        population = next_generation\r\n\r\n    return EA
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- multi_objective_algorithms/algorithms/main/spea2.py	(revision 8759f5e8b0118465f0d1231f31bdb971f4ef2f62)
+++ multi_objective_algorithms/algorithms/main/spea2.py	(date 1586710415422)
@@ -100,7 +100,7 @@
         X.extend(sort_population_by_fitness(dominated_individuals)[N - len(X)])
     elif len(X) > N:
         X = truncation(len(X) - N, X)[:N]
-
+    return X
 
 # +----------------------------------------------------------------------------------------------+#
 
@@ -153,7 +153,7 @@
         if generation == G+1 :
             break
 
-        update(dominated_individuals(U), EA, EN)
+        EA = update(dominated_individuals(U), EA, EN)
 
         # Creating the mating_pool
         mating_pool = []
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"JavaScriptSettings\">\r\n    <option name=\"languageLevel\" value=\"ES6\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.8\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision 8759f5e8b0118465f0d1231f31bdb971f4ef2f62)
+++ .idea/misc.xml	(date 1586707787146)
@@ -3,5 +3,5 @@
   <component name="JavaScriptSettings">
     <option name="languageLevel" value="ES6" />
   </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.7" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: multi_objective_algorithms/experimentation/evaluation_test/test_results.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>algorithm,activities,candidates,MCN/G,SN/N,GD,IGD,HV,HV_min,HV_max,scalability\r\nnsga2,5,20,20,20,0.009706578247071345,0.024291765955957258,0.23889533680220676,0.12708344851766873,0.3530856479319687,0.22749423185984297\r\n\r\nnsga2_r,5,20,20,20,0.010620701046897251,0.03760796842278756,0.22686187768314522,0.14247357350253637,0.33458244975018026,0.2364997227986654\r\n\r\nspea2,5,20,20,20,0.017822738840694595,0.017612862018763942,0.7294187222795242,0.4969230260746562,0.9498493888527697,0.48928935527801515\r\n\r\nmoabc,5,20,20,20,0.011609797383512432,0.059730010687229315,0.4097608057373989,0.25315632912391417,0.635739007955107,0.9602306445439658\r\n\r\nmoabc_nsga2,5,20,20,20,0.009403354435855691,0.015711374074617424,0.17029556124858533,0.11053004819980752,0.2152417553374606,2.4558352947235105\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- multi_objective_algorithms/experimentation/evaluation_test/test_results.csv	(revision 8759f5e8b0118465f0d1231f31bdb971f4ef2f62)
+++ multi_objective_algorithms/experimentation/evaluation_test/test_results.csv	(date 1586709672089)
@@ -8,3 +8,29 @@
 moabc,5,20,20,20,0.011609797383512432,0.059730010687229315,0.4097608057373989,0.25315632912391417,0.635739007955107,0.9602306445439658
 
 moabc_nsga2,5,20,20,20,0.009403354435855691,0.015711374074617424,0.17029556124858533,0.11053004819980752,0.2152417553374606,2.4558352947235105
+nsga2,5,50,10,20,0.009633703470801506,0.02133265316021701,0.41670876416454417,0.18127947686063747,0.7183802213683801,0.10902051925659179
+
+nsga2_r,5,50,10,20,0.010491648906424032,0.02511087953160403,0.405945736431363,0.1701904387938742,0.6104838560214906,0.10340091387430825
+
+spea2,5,50,10,20,0.029485092044371167,0.021880508631488917,1.1440530595117808,0.8825099862967555,1.6772470904939019,0.22611806392669678
+
+nsga2,5,50,10,20,0.028807314348907657,0.048257412745598215,0.5727288063683281,0.21739480935524502,0.9811126031162041,0.29756776491800946
+
+nsga2_r,5,50,10,20,0.03149368834699704,0.054138512253496904,0.5241925110784799,0.2660655787433681,0.8218956849074979,0.29634702205657953
+
+spea2,5,50,10,20,0.07838785637259163,0.04986769879493051,1.5864872985368632,1.19479816889649,2.0491226557581737,2.5381131649017337
+
+moabc,5,50,10,20,0.023107338916637816,0.02570714383991726,0.4093808615766171,0.16069579896880137,0.6294762347969621,1.0096657037734986
+
+nsga2,5,50,5,10,0.04550698987128277,0.06108306403908373,0.4545086088358002,0.07806651787057431,0.8442566983665176,0.05691384474436443
+
+nsga2_r,5,50,5,10,0.04727145898616605,0.06427219941189288,0.48464740428094905,0.1697661234243975,0.679374000550587,0.0627645492553711
+
+nsga2,5,50,10,10,0.036220334351187856,0.09677668379780621,0.5808654383099187,0.17138987115876209,1.3765457681254327,0.10298914114634196
+
+nsga2_r,5,50,10,10,0.02730642086632428,0.06075647223630952,0.5944785293328738,0.09704916920620732,0.9384894168448673,0.11208129723866779
+
+nsga2,5,50,10,10,0.02871673485754949,0.05675905324349561,0.5541792519902021,0.05102311738976131,1.2368440917329235,0.10160179138183595
+
+nsga2_r,5,50,10,10,0.028276218576079624,0.04857743137487574,0.5669772482415417,0.27305002928108285,1.0196273988190927,0.11286257902781167
+
Index: .idea/PCD-Composition-Services-Cloud.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.8\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n  <component name=\"TestRunnerService\">\r\n    <option name=\"PROJECT_TEST_RUNNER\" value=\"pytest\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/PCD-Composition-Services-Cloud.iml	(revision 8759f5e8b0118465f0d1231f31bdb971f4ef2f62)
+++ .idea/PCD-Composition-Services-Cloud.iml	(date 1586707787142)
@@ -2,7 +2,7 @@
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$" />
-    <orderEntry type="jdk" jdkName="Python 3.8" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.7" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
   <component name="TestRunnerService">
